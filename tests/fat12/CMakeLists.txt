
find_package(GTest REQUIRED)

enable_compiler_flag_if_supported("-Wno-analyzer-use-of-uninitialized-value")


add_executable(test_fat12_directory_entry_by_name directory_entry_by_name.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_directory_entry_by_name GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_directory_entry_by_name GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_directory_entry_by_name)

add_executable(test_fat12_directory_iterator directory_iterator.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_directory_iterator GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_directory_iterator GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_directory_iterator)

add_executable(test_fat12_directory_new_folder directory_new_folder.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_directory_new_folder GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_directory_new_folder GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_directory_new_folder)

add_executable(test_fat12_directory_open directory_open.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_directory_open GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_directory_open GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_directory_open)

add_executable(test_fat12_directory_utils directory_utils.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_directory_utils GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_directory_utils GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_directory_utils)

add_executable(test_fat12_file_open file_open.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_file_open GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_file_open GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_file_open)

add_executable(test_fat12_file_read file_read.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_file_read GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_file_read GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_file_read)

add_executable(test_fat12_invalid_block_device invalid_block_device.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_invalid_block_device GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_invalid_block_device GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_invalid_block_device)

add_executable(test_fat12_mount mount.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_mount GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_mount GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_mount)

add_executable(test_fat12_null_block_device null_block_device.cc _helper.cc)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_COMPILER_IS_GNUCXX)
  target_link_libraries(test_fat12_null_block_device GTest::gtest_main gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat12_null_block_device GTest::gtest_main bfsfat bfsblockdev bfscommon)
endif()
gtest_discover_tests(test_fat12_null_block_device)
