
find_package(Check REQUIRED)

enable_compiler_flag_if_supported("-Wno-missing-prototypes")

add_executable(test_fat32_directory_entry_by_name directory_entry_by_name.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_directory_entry_by_name check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_directory_entry_by_name check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_directory_entry_by_name COMMAND test_fat32_directory_entry_by_name)

add_executable(test_fat32_directory_iterator directory_iterator.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_directory_iterator check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_directory_iterator check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_directory_iterator COMMAND test_fat32_directory_iterator)

add_executable(test_fat32_directory_new_folder directory_new_folder.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_directory_new_folder check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_directory_new_folder check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_directory_new_folder COMMAND test_fat32_directory_new_folder)

add_executable(test_fat32_directory_open directory_open.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_directory_open check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_directory_open check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_directory_open COMMAND test_fat32_directory_open)

add_executable(test_fat32_directory_utils directory_utils.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_directory_utils check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_directory_utils check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_directory_utils COMMAND test_fat32_directory_utils)

add_executable(test_fat32_file_open file_open.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_file_open check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_file_open check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_file_open COMMAND test_fat32_file_open)

add_executable(test_fat32_file_read file_read.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_file_read check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_file_read check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_file_read COMMAND test_fat32_file_read)

add_executable(test_fat32_invalid_block_device invalid_block_device.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_invalid_block_device check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_invalid_block_device check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_invalid_block_device COMMAND test_fat32_invalid_block_device)

add_executable(test_fat32_mount mount.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_mount check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_mount check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_mount COMMAND test_fat32_mount)

add_executable(test_fat32_null_block_device null_block_device.c _helper.c)
if(${BFS_BUILD_WITH_COVERAGE} AND CMAKE_C_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(test_fat32_null_block_device check gcov bfsfat bfsblockdev bfscommon)
else()
  target_link_libraries(test_fat32_null_block_device check bfsfat bfsblockdev bfscommon)
endif()
add_test(NAME test_fat32_null_block_device COMMAND test_fat32_null_block_device)
